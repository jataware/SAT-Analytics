# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.geo import Geo  # noqa: F401,E501
from openapi_server.models.keyword_search import KeywordSearch  # noqa: F401,E501
from openapi_server.models.keyword_search_keywords import KeywordSearchKeywords  # noqa: F401,E501
from openapi_server import util


class Body(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, keywords: KeywordSearchKeywords=None, area_name: List[str]=None):  # noqa: E501
        """Body - a model defined in OpenAPI

        :param keywords: The keywords of this Body.  # noqa: E501
        :type keywords: KeywordSearchKeywords
        :param area_name: The area_name of this Body.  # noqa: E501
        :type area_name: List[str]
        """
        self.openapi_types = {
            'keywords': KeywordSearchKeywords,
            'area_name': List[str]
        }

        self.attribute_map = {
            'keywords': 'keywords',
            'area_name': 'area_name'
        }

        self._keywords = keywords
        self._area_name = area_name

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def keywords(self) -> KeywordSearchKeywords:
        """Gets the keywords of this Body.


        :return: The keywords of this Body.
        :rtype: KeywordSearchKeywords
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: KeywordSearchKeywords):
        """Sets the keywords of this Body.


        :param keywords: The keywords of this Body.
        :type keywords: KeywordSearchKeywords
        """

        self._keywords = keywords

    @property
    def area_name(self) -> List[str]:
        """Gets the area_name of this Body.


        :return: The area_name of this Body.
        :rtype: List[str]
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name: List[str]):
        """Sets the area_name of this Body.


        :param area_name: The area_name of this Body.
        :type area_name: List[str]
        """
        if area_name is None:
            raise ValueError("Invalid value for `area_name`, must not be `None`")  # noqa: E501

        self._area_name = area_name
