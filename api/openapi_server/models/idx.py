# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Idx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id: str=None, variable_id: str=None):  # noqa: E501
        """Idx - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this Idx.  # noqa: E501
        :type dataset_id: str
        :param variable_id: The variable_id of this Idx.  # noqa: E501
        :type variable_id: str
        """
        self.openapi_types = {
            'dataset_id': str,
            'variable_id': str
        }

        self.attribute_map = {
            'dataset_id': 'dataset_id',
            'variable_id': 'variable_id'
        }

        self._dataset_id = dataset_id
        self._variable_id = variable_id

    @classmethod
    def from_dict(cls, dikt) -> 'Idx':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The idx of this Idx.  # noqa: E501
        :rtype: Idx
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self) -> str:
        """Gets the dataset_id of this Idx.

        dataset id with variable you'd like to correlate  # noqa: E501

        :return: The dataset_id of this Idx.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id: str):
        """Sets the dataset_id of this Idx.

        dataset id with variable you'd like to correlate  # noqa: E501

        :param dataset_id: The dataset_id of this Idx.
        :type dataset_id: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def variable_id(self) -> str:
        """Gets the variable_id of this Idx.

        variable of interest  # noqa: E501

        :return: The variable_id of this Idx.
        :rtype: str
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id: str):
        """Sets the variable_id of this Idx.

        variable of interest  # noqa: E501

        :param variable_id: The variable_id of this Idx.
        :type variable_id: str
        """
        if variable_id is None:
            raise ValueError("Invalid value for `variable_id`, must not be `None`")  # noqa: E501

        self._variable_id = variable_id
